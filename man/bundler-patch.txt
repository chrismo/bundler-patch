# This isn't in man format yet, but it's a start...

bundler-patch attempts to patch gems conservatively. By default,
"conservatively" means it will prefer the latest release from the
current version, followed by the latest minor release and then finally
the latest major release. This is somewhat opposite from `bundle update`
which prefers newest/major versions first.

Gem requirements as defined in the Gemfile will restrict the overall
version options.

"Prefer" means that no versions are removed from consideration**, to
help ensure a suitable dependency graph can be reconciled.

For example, if gem 'foo' is locked at 1.0.2, with no gem requirement
defined in the Gemfile, and versions 1.0.3, 1.0.4, 1.1.0, 1.1.1, 2.0.0
all exist, the default order of preference will be "1.0.4, 1.0.3, 1.0.2,
1.1.1, 1.1.0, 2.0.0".

If no gem names are listed, then all gems will be unlocked and open for
updating. A list of gem names can be passed to restrict to just those
gems.

The -m/--minor_allowed option will give preference for minor versions
over release versions.

The -p/--prefer_minimal option will reverse the preference order within
release, minor, major groups to just 'the next' version. In the prior
example, the order of preference changes to "1.0.3, 1.0.4, 1.0.2, 1.1.0,
1.1.1, 2.0.0"

The -s/--strict_updates option will actually remove from consideration
versions outside either the current release (or minor version if -m
specified). This increases the chances of Bundler being unable to
reconcile the dependency graph and could raise a VersionConflict.

bundler-patch will also check for vulnerabilities based on the
ruby-advisory-db. Vulnerabilities can be listed with the -l/--list
option. A path to a custom ruby-advisory-db styled directory can also be
provided with the -a switch, to use this tool for updating
custom/internal gems.

The rules for updating vulnerable gems are almost identical to the
general bundler-patch behavior described above, and abide by the same
options (-m, -p, and -s) though there are some tweaks to encourage
getting to at least a patched version of the gem, though, again, Bundler
may choose unexpected versions in order to satisfy the dependency graph.

To automatically restrict gems being updated to vulnerable gems, use the
-v/--vulnerable_gems_only option. If a combination of -v and a list of
gem names are passed, the -v option is ignored in favor of the listed
gem names.

**That's a white-lie. bundler-patch will actually remove from
consideration any versions _older_ than the currently locked version,
which `bundle update` will not do. It's not common, but it is possible
for `bundle update` to regress a gem to an older version, if necessary
to reconcile the dependency graph.
